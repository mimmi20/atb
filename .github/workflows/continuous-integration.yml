# https://help.github.com/en/categories/automating-your-workflow-with-github-actions

# file-version: 1.0

name: 'Continuous Integration'

on:
  - pull_request
  - push

permissions:
  contents: read

concurrency:
  group: '${{ github.event_name }}-${{ github.workflow }}-${{ github.head_ref || github.run_id }}-${{ github.ref }}'
  cancel-in-progress: true

jobs:
  validate:
    name: 'Validate Project'

    uses: 'mimmi20/ci/.github/workflows/validate.yml@8.3'
    with:
      extensions: 'ctype, curl, dom, fileinfo, iconv, intl, mbstring, simplexml, tokenizer, xml, xmlwriter'
      ini-values: 'opcache.enable=1, opcache.fast_shutdown=0, zend.assertions=1, assert.exception=On, intl.default_locale=de, intl.use_exceptions=1, zend.exception_ignore_args=0'
      composer-options: '--optimize-autoloader --prefer-dist --prefer-stable -v'
      skip-validate-composer: false
      skip-validate-yaml: false
      skip-validate-md: false
      skip-phplint: false
      skip-check-composer: true
      skip-ec-checker: false
      dependency-analyser-options: ''

  install:
    name: 'Install Project'

    needs: 'validate'

    uses: 'mimmi20/ci/.github/workflows/install.yml@8.3'
    with:
      extensions: 'ctype, curl, dom, fileinfo, iconv, mbstring, intl, simplexml, tokenizer, xml, xmlwriter'
      ini-values: 'opcache.enable=1, opcache.fast_shutdown=0, zend.assertions=1, assert.exception=On, intl.default_locale=de, intl.use_exceptions=1, zend.exception_ignore_args=0'
      composer-options: '--optimize-autoloader --prefer-dist --prefer-stable -v'
      skip-php-install: false
      skip-npm-install: false
      skip-nasm-install: false
      skip-libimagequant-install: false

  analytics:
    name: 'Project Analysis'

    needs: 'install'

    uses: 'mimmi20/ci/.github/workflows/analytics.yml@8.3'
    with:
      extensions: 'ctype, curl, dom, fileinfo, iconv, intl, mbstring, simplexml, tokenizer, xml, xmlwriter'
      ini-values: 'opcache.enable=1, opcache.fast_shutdown=0, zend.assertions=1, assert.exception=On, intl.default_locale=de, intl.use_exceptions=1, zend.exception_ignore_args=0'
      composer-options: '--optimize-autoloader --prefer-dist --prefer-stable -v'
      skip-php-cs-fixer: false
      skip-phpcs: false
      skip-phpstan: false
      skip-rector: false
      skip-eslint: false
      skip-stylelint: false
      skip-prettier: false
      skip-nasm-install: false
      skip-libimagequant-install: false
      skip-oxlint: false
      phpcs-options: ''

  tests:
    name: 'UnitTests'

    needs: 'analytics'

    uses: 'mimmi20/ci/.github/workflows/test.yml@8.3'
    with:
      extensions: 'ctype, dom, fileinfo, intl, simplexml, tokenizer, xml, xmlwriter'
      ini-values: 'opcache.enable=1, opcache.fast_shutdown=0, zend.assertions=1, assert.exception=On, intl.default_locale=de, intl.use_exceptions=1, zend.exception_ignore_args=0'
      coverage: 'xdebug'
      composer-options: '--optimize-autoloader --prefer-dist --prefer-stable -v'
      test-name: ''
      min-msi: 0
      min-covered-msi: 0
      skip-phpunit: false
      skip-vitest: true
      skip-stryker: true
      skip-nasm-install: false
      skip-libimagequant-install: false
      upload-codecov: true
      upload-codeclimate: true
      upload-coveralls: false
      upload-flag: ''
    secrets:
      ENV_CODECLIMATE_API_KEY: ${{ secrets.CODECLIMATE_API_KEY }}
      ENV_CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      ENV_STRYKER_DASHBOARD_API_KEY: ${{ secrets.STRYKER_DASHBOARD_API_KEY }}

  build-with-vite:
    name: 'Build with vite'

    needs: 'tests'

    runs-on: 'ubuntu-latest'

    timeout-minutes: 10

    continue-on-error: false

    strategy:
      fail-fast: false

      matrix:
        node-version:
          - '22'
          - '24'

    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@v4'
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0
          lfs: false
          persist-credentials: false

      - name: 'Set up NASM (for imagemin binary builds)'
        uses: 'ilammy/setup-nasm@v1'

      - name: 'install libimagequant-dev'
        run: 'sudo apt-get install libimagequant-dev -y'

      - name: 'install libpng-dev'
        run: 'sudo apt-get install libpng-dev -y'

      - name: 'Use Node.js ${{ matrix.node-version }}'
        uses: 'actions/setup-node@v4'
        with:
          node-version: '${{ matrix.node-version }}'

      - name: 'install dependencies'
        run: 'npm install'

      - name: 'build'
        run: 'npm run build'

  cypress-run:
    name: 'Run Cypress tests'

    needs: 'tests'

    runs-on: 'ubuntu-latest'

    timeout-minutes: 10

    continue-on-error: true

    strategy:
      fail-fast: false

      matrix:
        node-version:
          - '22'
          - '24'

        browser:
          - 'electron'
          - 'chrome'
          - 'firefox'
          - 'edge'

    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@v4'
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0
          lfs: false
          persist-credentials: false

      - name: 'Set up NASM (for imagemin binary builds)'
        uses: 'ilammy/setup-nasm@v1'

      - name: 'install libimagequant-dev'
        run: 'sudo apt-get install libimagequant-dev -y'

      - name: 'install libpng-dev'
        run: 'sudo apt-get install libpng-dev -y'

      - name: 'Install PHP'
        uses: 'shivammathur/setup-php@2.35.3'
        with:
          php-version: '8.3'
          extensions: 'none, phar, json, opcache, ctype, curl, dom, fileinfo, iconv, intl, mbstring, simplexml, tokenizer, xml, xmlwriter'
          ini-values: 'opcache.enable=1, opcache.fast_shutdown=0, zend.assertions=1, assert.exception=On, intl.default_locale=de, intl.use_exceptions=1, zend.exception_ignore_args=0'
          coverage: 'none'
          tools: 'composer:v2'
        env:
          fail-fast: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          phpts: 'nts'
          debug: true

      - name: 'Update dependencies with composer'
        uses: 'ramsey/composer-install@3.1.1'
        with:
          dependency-versions: 'lowest'
          composer-options: '--optimize-autoloader --prefer-dist --prefer-stable -v'

      - name: 'Use Node.js ${{ matrix.node-version }}'
        uses: 'actions/setup-node@v4'
        with:
          node-version: '${{ matrix.node-version }}'

      - name: 'install dependencies'
        run: 'npm install'

      - name: 'E2E on "${{ matrix.browser }}" on Node ${{ matrix.node-version }}'
        uses: 'cypress-io/github-action@v6'
        with:
          build: 'npm run build'
          command: 'npm run test:e2e'
          browser: '${{ matrix.browser }}'
        env:
          # Get the short ref name of the branch that triggered the workflow run
          COMMIT_INFO_BRANCH: ${{ github.ref_name }}
          # pass GitHub token to allow accurately detecting a build vs a re-run build
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Creates and uploads GitHub artifacts in case of failure
      - uses: 'actions/upload-artifact@v4'
        if: failure()
        with:
          name: 'cypress-screenshots-${{ matrix.browser }}-node${{ matrix.node-version }}'
          path: 'cypress/screenshots'

  # This is a meta job to avoid to have to constantly change the protection rules
  # whenever we touch the matrix.
  tests-status:
    name: 'Unit & Integration Tests Status'

    runs-on: 'ubuntu-latest'

    if: always()

    needs:
      - 'tests'
      - 'build-with-vite'
      - 'cypress-run'

    steps:
      - name: Successful run
        if: ${{ !(contains(needs.*.result, 'failure')) }}
        run: exit 0

      - name: Failing run
        if: ${{ contains(needs.*.result, 'failure') }}
        run: exit 1
